from flask import request, jsonify
from app.config import VERIFY_TOKEN, CSV_FILE_PATH
from app.models.load_data import load_csv
from app.recommender import content_based_recommender
from app.messenger import send_message, send_message_with_image
import logging

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å CSV
try:
    df = load_csv(CSV_FILE_PATH)
    logger.info("CSV loaded successfully")
except Exception as e:
    df = None
    logger.error(f"Error loading CSV file: {e}")

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∏‡∏ì‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
features = ['‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', '‡∏£‡∏≤‡∏Ñ‡∏≤', '‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û']

def setup_routes(app):
    @app.route('/')
    def home():
        """‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á API"""
        return jsonify({"message": "Welcome to the Recommendation API!"})

    @app.route('/recommend', methods=['GET'])
    def recommend():
        """API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"""
        product_name = request.args.get('product_name')
        
        if not product_name:
            return jsonify({"error": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"}), 400

        if df is None:
            return jsonify({"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ"}), 500

        recommended_products = content_based_recommender(product_name, df, features)
        
        if 'error' in recommended_products:
            return jsonify(recommended_products), 404

        return jsonify(recommended_products), 200

    @app.route('/webhook', methods=['GET', 'POST'])
    def webhook():
        """Webhook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Facebook Messenger"""
        if request.method == 'GET':
            # Debug logs
            logger.info(f"GET params: {request.args}")
            
            mode = request.args.get('hub.mode')
            token = request.args.get('hub.verify_token')
            challenge = request.args.get('hub.challenge')
            
            logger.info(f"Verification attempt - Mode: {mode}, Token: {token}")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token
            if mode and token:
                if mode == 'subscribe' and token == VERIFY_TOKEN:
                    logger.info("Webhook verified successfully")
                    return str(challenge)
                else:
                    logger.warning("Verification failed - Invalid token")
                    return 'Verification failed', 403
            
            logger.error("Invalid verification request")
            return 'Invalid request', 400

        elif request.method == 'POST':
            try:
                data = request.get_json()
                logger.info("Received webhook data")
                
                if not data:
                    logger.error("Empty payload received")
                    return 'Invalid payload', 400
                
                for entry in data.get('entry', []):
                    for messaging in entry.get('messaging', []):
                        try:
                            sender_id = messaging['sender']['id']
                            logger.info(f"Processing message from sender: {sender_id}")
                            
                            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                            if 'message' in messaging and 'text' in messaging['message']:
                                user_message = messaging['message']['text'].strip()
                                logger.info(f"Received message: {user_message}")
                                
                                if not user_message:
                                    send_message(sender_id, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")
                                    continue
                                
                                if df is None:
                                    send_message(sender_id, "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ")
                                    continue

                                # ‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
                                send_message(sender_id, f"üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö '{user_message}'...")
                                
                                # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
                                recommended_products = content_based_recommender(user_message, df, features)
                                
                                if 'recommendations' in recommended_products:
                                    recommendations = recommended_products['recommendations']
                                    if recommendations:
                                        for product in recommendations:
                                            message_text = (
                                                f"üöõ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: {product['‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤']}\n"
                                                f"üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤: {product['‡∏£‡∏≤‡∏Ñ‡∏≤']:,} ‡∏ö‡∏≤‡∏ó"
                                            )
                                            send_message_with_image(
                                                sender_id,
                                                message_text,
                                                product['‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û']
                                            )
                                            logger.info(f"Sent recommendation: {product['‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤']}")
                                    else:
                                        send_message(sender_id, "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")
                                else:
                                    error_message = recommended_products.get('error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤')
                                    send_message(sender_id, f"‚ö†Ô∏è {error_message}")
                                    logger.warning(f"Search error: {error_message}")
                            
                        except Exception as e:
                            logger.error(f"Error processing message: {e}", exc_info=True)
                            send_message(sender_id, "‚ö†Ô∏è ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•")
                
                return 'OK', 200
                
            except Exception as e:
                logger.error(f"Error processing webhook: {e}", exc_info=True)
                return 'Error', 500

        return 'Method not allowed', 405

    return app